#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <unistd.h>
#include <sys/wait.h>
#include <setjmp.h>
#include <signal.h>
#include <readline/readline.h>
#include <readline/history.h>
#include <errno.h>
#include<fcntl.h>

extern char **environ;

#define MAX_ARG_LIST	64
#define DEFAULT_PROMPT 	'$'
#define MAX_PROMPT_SIZE	200
#define MAX_HOSTNAME_SIZE	200
#define MAX_PATH_SIZE	200

const char *const condensePathStr(char *path);
const char *const expandPathStr(char *path);

#define MAX_CMD_SIZE	50
#define SEARCH_FOR_CMD	-1
typedef void (*builtInFunc)(char **);
typedef struct {
	char cmd[MAX_CMD_SIZE];
	builtInFunc func;
} builtInCmd;

/* built-in commands */
#define MAX_PATH_SIZE	200
void execCD(char *args[]);
void execExit(char *args[]);
void execHelp(char *args[]);
builtInCmd builtInCmds[] = {
	{"help", execHelp},
	{"exit", execExit},
	{"cd", execCD},
};
int builtInCnt = sizeof(builtInCmds)/sizeof(builtInCmd);

int isBuiltIn(char *cmd);
void execBuiltIn(int i, char *args[]);

/* control buffer and handler for SIGINT signal capture */
sigjmp_buf ctrlc_buf;
void ctrl_hndlr(int signo) {
   	siglongjmp(ctrlc_buf, 1);
}

/* error functions */
char *shname;
void error(int code, char *msg);
void warn(char *msg);

int check_execute(char *cmd);

int main(int argc, char *argv[]) {

	char *line;
	pid_t childPID;
	int argn;
	char *args[MAX_ARG_LIST];
	char *tok;
	int cmdn;
	char hostname[MAX_HOSTNAME_SIZE];
	char prompt[MAX_PROMPT_SIZE];
	char prompt_sep = DEFAULT_PROMPT;

	// get shell name
	shname = strrchr(argv[0], '/');
	if (shname == NULL)
		shname = argv[0];
	else
		++shname;

	// command-line completion
	rl_bind_key('\t', rl_complete);

	// get hostname
	gethostname(hostname, MAX_HOSTNAME_SIZE);

	/* set up control of SIGINT signal */
	if (signal(SIGINT, ctrl_hndlr) == SIG_ERR) 
		error(100, "Failed to register interrupts in kernel\n");
	while (sigsetjmp(ctrlc_buf, 1) != 0) 
		/* empty */;

	for(;;) {
    char *ptr;
    char *semicmd1;
    char *semicmd2;
    char *semicmd3;
    int i;
    int flag;

		// build prompt
		snprintf(prompt, MAX_PROMPT_SIZE, "%s@%s:%s%c ", 
			getenv("USER"), hostname, condensePathStr(getcwd(NULL,0)), prompt_sep);

		// get command-line
		line = readline(prompt);

		if (!line) // feof(stdin)
			break;
		
		// process command-line
		if (line[strlen(line)-1] == '\n')
			line[strlen(line)-1] = '\0';
		add_history(line);

        semicmd1 = NULL;
        semicmd2 = NULL;
        semicmd3 = NULL;
        semicmd1 = strtok(line, ";");
        semicmd2 = strtok(NULL, ";");
        semicmd3 = strtok(NULL, ";");
        if(semicmd3 != NULL) {
            fputs("sh: too many commands to process\n", stdout);
            continue;
        }
        
        flag = check_execute(semicmd1);
        if(flag == 1) { ; }
        else
        {

		tok = strtok(semicmd1, " \t");
		for (argn=0; tok!=NULL && argn<MAX_ARG_LIST; ++argn) {
			args[argn] = tok;
			tok = strtok(NULL, " \t");
		}
		args[argn] = NULL;

		if ((cmdn=isBuiltIn(args[0])) >= 0) { // process built-in command
			execBuiltIn(cmdn, args);
		} else { // execute command
			childPID = fork();
			if (childPID == 0) {
				execvpe(args[0], args, environ);
				warn("command failed to execute");
				_exit(2);
			} else {
				waitpid(childPID, NULL, 0);
			}
		}

        }
if(semicmd2 != NULL)
{
        flag = check_execute(semicmd2);
        if(flag == 1) { ; }
        else
        {

		tok = strtok(semicmd2, " \t");
		for (argn=0; tok!=NULL && argn<MAX_ARG_LIST; ++argn) {
			args[argn] = tok;
			tok = strtok(NULL, " \t");
		}
		args[argn] = NULL;

		if ((cmdn=isBuiltIn(args[0])) >= 0) { // process built-in command
			execBuiltIn(cmdn, args);
		} else { // execute command
			childPID = fork();
			if (childPID == 0) {
				execvpe(args[0], args, environ);
				warn("command failed to execute");
				_exit(2);
			} else {
				waitpid(childPID, NULL, 0);
			}
		}

        }

}
		fflush(stderr);
		fflush(stdout);
		free(line);
	}
	fputs("exit\n", stdout);

	return 0;
}

/* error functions */
void error(int code, char *msg) {
	fputs(shname, stderr);
	fputs(": ", stderr);
	fputs(msg, stderr);
	fputs("\n", stderr);
	if (code > 0)
		exit(code);
}
void warn(char *msg) {
	error(0, msg);
}

/* manage '~' for home path */
const char *const condensePathStr(char *path) {
	static char newpath[MAX_PATH_SIZE];

	newpath[0] = '\0';
	if (path != NULL) {
		if (strstr(path, getenv("HOME")) == path)
			snprintf(newpath, MAX_PATH_SIZE, "%c%s", '~', &path[strlen(getenv("HOME"))]);
		else
			snprintf(newpath, MAX_PATH_SIZE, "%s", path);
	}

	return newpath;
}

const char *const expandPathStr(char *path) {
	static char newpath[MAX_PATH_SIZE];

	newpath[0] = '\0';
	if (path != NULL) {
		if (path[0] == '~')
			snprintf(newpath, MAX_PATH_SIZE, "%s%s", getenv("HOME"), &path[1]);
		else
			snprintf(newpath, MAX_PATH_SIZE, "%s", path);
	}

	return newpath;
}

/* return index in the builtInCmds array or -1 for failure */
int isBuiltIn(char *cmd) {
	int i;
	for (i = 0; i < builtInCnt; ++i)
		if (strcmp(cmd,builtInCmds[i].cmd)==0)
			break;
	return i<builtInCnt?i:-1;
}

/* i is the index or SEARCH_FOR_CMD */
void execBuiltIn(int i, char *args[]) {
	if (i==SEARCH_FOR_CMD)
		i = isBuiltIn(args[0]);
	if (i>-1) 
		builtInCmds[i].func(args);
	else
		warn("unknown built-in command");
}

/* built-in functions */
void execHelp(char *args[]) {
	warn("help unavailable at the moment");
}

void execExit(char *args[]) {
	int code = 0;
    int i;
	if (args[2] != NULL)
		error(1, "exit: too many arguments");
	for(i=0;i<strlen(args[1]);++i)
		if (!isdigit(args[1][i]))
			error(2, "exit: numeric argument required");
	code = atoi(args[1]);
	exit(code);
}

void execCD(char *args[]) {
	int err = 0;
	char path[MAX_PATH_SIZE];
	if (args[1] == NULL)
		snprintf(path, MAX_PATH_SIZE, "%s", getenv("HOME"));
	else
		snprintf(path, MAX_PATH_SIZE, "%s", expandPathStr(args[1]));
	err = chdir(path);
	if (err<0)
		warn(strerror(errno));
}

int check_execute(char *cmd) {
    int type, pid, filedes, open_flgs, retval, pcount;
    mode_t o_type;
    char *ptr, *word1, *word2, *word3;
    char *params[3];

    if((ptr = strchr(cmd, '<')) != NULL)
        type = 1;
    else if((ptr = strstr(cmd, ">>")) != NULL)
        type = 3;
    else if((ptr = strchr(cmd, '>')) != NULL)
        type = 2;
    else if((ptr = strchr(cmd, '|')) != NULL)
        type = 4;

    switch(type){
        case 1: //input redirection
                word1 = strtok(cmd, "<");
                word2 = strtok(NULL, " "); 
                word1 = strtok(word1, " ");
                params[0] = word1;
                params[1] = NULL;
                if((filedes = open(word2, O_RDONLY)) == -1){
                    fputs("not opening the file\n", stdout);
                    return -2;
                }
                pid = fork();
                if(pid == 0){
                    dup2(filedes, STDIN_FILENO);
                    execvpe(params[0], params, environ);
                } else if(pid == -1){
                    fputs("fork error!\n", stdout);
                    return -2;
                } else {
                    wait(&retval);
                    return 1;
                }
                break;

        case 2: //output redirection
                word1 = strtok(cmd, " ");
                word2 = strtok(NULL, ">");
                word3 = strtok(NULL, " ");
                word2 = strtok(word2, " \t");
                params[0] = word1;
                params[1] = word2;
                params[2] = NULL;
                open_flgs = O_WRONLY | O_CREAT | O_TRUNC;
                o_type = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;
                if((filedes = open(word3, open_flgs, o_type)) == -1){
                    fputs("Redirection error\n", stdout);
                    return -1;
                }

                pid = fork();
                if(pid == 0) {
                    dup2(filedes, STDOUT_FILENO);
                    execvpe(params[0], params, environ);
                } else if(pid == -1) {
                    fputs("Fork error\n", stdout);
                    return -1;
                } else {
                    wait(&retval);
                    return 1;
                }
                break;
        case 3: //append redirection
                word1 = strtok(cmd, " ");
                word2 = strtok(NULL, ">");
                word3 = strtok(NULL, " ");
                word3 = strtok(NULL, " ");
                word2 = strtok(word2, " ");

                params[0] = word1;
                params[1] = word2;
                params[2] = NULL;
                open_flgs =  O_WRONLY | O_APPEND;
                o_type = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;
                if((filedes = open(word3, open_flgs, o_type)) == -1) {
                    return -1;
                }
                pid = fork();
                if(pid == 0) {
                    dup2(filedes, STDOUT_FILENO);
                    execvpe(params[0], params, environ);
                } else if(pid == -1) {
                    fputs("fork error\n", stdout);
                    return -1;
                } else {
                    wait(&retval);
                    return 1;
                }
                break;
        case 4: //pipe
                break;
        default:
                break;
    }
}
